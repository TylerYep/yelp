import pandas as pd
import networkx as nx
from scipy.spatial import Delaunay
import scipy.spatial.distance as dist
import numpy as np
import random
import matplotlib.pyplot as plt
from tqdm import tqdm
import math

dims = int(1e3)

#aels = []
#for prob in tqdm(np.linspace(1e-3, 5e-2, 100)):
#    # generate a point distribution
#    points = []
#    for i in range(dims):
#        for j in range(dims):
#            if random.random() < prob:
#                points.append([i, j])
#    ps = np.array(points)
#    # generate delaunay
#    tri = Delaunay(points)
#    # calculate average edge length
#    edges = set()
#    for n in xrange(tri.nsimplex):
#        for i in range(3):
#            for j in range(i, 3):
#                edge = sorted([tri.vertices[n, i], tri.vertices[n, j]])
#                edges.add(tuple(edge))
#    dists = [dist.euclidean(ps[a], ps[b]) for a, b in edges]
#    ael = float(sum(dists)) / len(dists)
#    aels.append((prob, ael))
#
#probs, les = zip(*aels)
probs = (0.001, 0.001494949494949495, 0.00198989898989899, 0.0024848484848484847, 0.00297979797979798, 0.003474747474747475, 0.00396969696969697, 0.004464646464646465, 0.00495959595959596, 0.005454545454545455, 0.00594949494949495, 0.0064444444444444445, 0.00693939393939394, 0.007434343434343435, 0.007929292929292928, 0.008424242424242424, 0.00891919191919192, 0.009414141414141413, 0.009909090909090909, 0.010404040404040405, 0.010898989898989901, 0.011393939393939394, 0.01188888888888889, 0.012383838383838386, 0.012878787878787878, 0.013373737373737375, 0.01386868686868687, 0.014363636363636363, 0.01485858585858586, 0.015353535353535355, 0.015848484848484848, 0.016343434343434344, 0.01683838383838384, 0.017333333333333336, 0.01782828282828283, 0.018323232323232325, 0.01881818181818182, 0.019313131313131313, 0.01980808080808081, 0.020303030303030305, 0.0207979797979798, 0.021292929292929294, 0.02178787878787879, 0.022282828282828286, 0.02277777777777778, 0.023272727272727275, 0.02376767676767677, 0.024262626262626263, 0.02475757575757576, 0.025252525252525256, 0.025747474747474748, 0.026242424242424244, 0.02673737373737374, 0.027232323232323233, 0.02772727272727273, 0.028222222222222225, 0.028717171717171718, 0.029212121212121214, 0.02970707070707071, 0.030202020202020206, 0.0306969696969697, 0.031191919191919194, 0.03168686868686869, 0.03218181818181818, 0.03267676767676768, 0.03317171717171717, 0.03366666666666667, 0.034161616161616164, 0.034656565656565656, 0.035151515151515156, 0.03564646464646465, 0.03614141414141414, 0.03663636363636364, 0.03713131313131313, 0.037626262626262626, 0.038121212121212125, 0.03861616161616162, 0.03911111111111111, 0.03960606060606061, 0.0401010101010101, 0.0405959595959596, 0.041090909090909095, 0.04158585858585859, 0.04208080808080809, 0.04257575757575758, 0.04307070707070707, 0.04356565656565657, 0.044060606060606064, 0.04455555555555556, 0.045050505050505056, 0.04554545454545455, 0.04604040404040404, 0.04653535353535354, 0.04703030303030303, 0.047525252525252526, 0.048020202020202025, 0.04851515151515152, 0.04901010101010101, 0.04950505050505051, 0.05)
les = (29.148919519467213, 24.42175792985369, 20.626988526265727, 18.128786030153115, 16.572093173709305, 15.509357562092966, 13.958727079579393, 13.56906439903805, 12.518065825860427, 11.994131607933669, 11.57100955183371, 11.054437996773697, 10.779698591269893, 10.147032106754718, 9.964268639834806, 9.486991682346686, 9.32319196570948, 9.071756692390021, 8.783238506122741, 8.546063013711919, 8.359254690895133, 8.140675605211838, 7.99190382783199, 7.8297928830508035, 7.689082327597779, 7.540746293643834, 7.40234389969827, 7.295671682501422, 7.1269891303889965, 6.986005508643359, 6.859721397606399, 6.771160962655324, 6.663897110539886, 6.623290303889715, 6.5414677135815875, 6.394704731876498, 6.317854664804158, 6.2558050920211015, 6.113784615523082, 6.065090788148196, 5.999263159205294, 5.8817807061476834, 5.830621174750987, 5.81487252146461, 5.735228566556785, 5.68088183236969, 5.636328909036994, 5.5326457941444005, 5.475491961293789, 5.449270684541232, 5.370991123009308, 5.3344830414818025, 5.291608844245444, 5.2583898407209455, 5.195393176202677, 5.101515374291026, 5.074218266829866, 5.074526560428646, 4.980845847673706, 4.978043041270913, 4.898001100613792, 4.912125239333536, 4.841173634490518, 4.798551577361929, 4.778291433030652, 4.745653686357975, 4.667434435529976, 4.657030159675679, 4.617533235233234, 4.598617472567563, 4.565815835644182, 4.527134578304389, 4.4887946162275725, 4.479514651243145, 4.430465956163105, 4.396204492244837, 4.3761889553549915, 4.338315948821889, 4.316888230716226, 4.287832605411067, 4.269681486802836, 4.231037786413945, 4.219217363915594, 4.1829952870086045, 4.164190284162394, 4.146237386518078, 4.125244167488983, 4.092218047339253, 4.066581108377809, 4.041494655403272, 4.028117681004587, 3.988697945627022, 3.968642296158281, 3.9613043575071463, 3.9276642487448457, 3.9066276558956576, 3.892616449709395, 3.878946901663139, 3.8659304448643064, 3.8402839485904994)

#lam = [32. / (9 * math.pi * math.sqrt(prob)) for prob in probs]
#lesc = [l for l in les]
lam = probs
lesc = [1./(l*l) for l in les]
plt.scatter(lam, lesc)
plt.show()
print([x - y for x,y in zip(lam, lesc)])

"""
l  = m / sqrt(p)
p' = k * p = k * c / l2 = c / l'2
l' = l / sqrt(k)
"""
